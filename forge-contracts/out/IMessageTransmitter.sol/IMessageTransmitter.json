{"abi":[{"type":"function","name":"receiveMessage","inputs":[{"name":"message","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"replaceMessage","inputs":[{"name":"originalMessage","type":"bytes","internalType":"bytes"},{"name":"originalAttestation","type":"bytes","internalType":"bytes"},{"name":"newMessageBody","type":"bytes","internalType":"bytes"},{"name":"newDestinationCaller","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"sendMessage","inputs":[{"name":"destinationDomain","type":"uint32","internalType":"uint32"},{"name":"recipient","type":"bytes32","internalType":"bytes32"},{"name":"messageBody","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"nonpayable"},{"type":"function","name":"sendMessageWithCaller","inputs":[{"name":"destinationDomain","type":"uint32","internalType":"uint32"},{"name":"recipient","type":"bytes32","internalType":"bytes32"},{"name":"destinationCaller","type":"bytes32","internalType":"bytes32"},{"name":"messageBody","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"receiveMessage(bytes,bytes)":"57ecfd28","replaceMessage(bytes,bytes,bytes,bytes32)":"b857b774","sendMessage(uint32,bytes32,bytes)":"0ba469bc","sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":"f7259a75"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"originalMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"originalAttestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newMessageBody\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"newDestinationCaller\",\"type\":\"bytes32\"}],\"name\":\"replaceMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCaller\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithCaller\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveMessage(bytes,bytes)\":{\"params\":{\"message\":\"The message raw bytes\",\"signature\":\"The message signature\"},\"returns\":{\"success\":\"bool, true if successful\"}},\"replaceMessage(bytes,bytes,bytes,bytes32)\":{\"details\":\"The `originalAttestation` must be a valid attestation of `originalMessage`.\",\"params\":{\"newDestinationCaller\":\"the new destination caller\",\"newMessageBody\":\"new message body of replaced message\",\"originalAttestation\":\"attestation of `originalMessage`\",\"originalMessage\":\"original message to replace\"}},\"sendMessage(uint32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information.\",\"params\":{\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.\",\"params\":{\"destinationCaller\":\"caller on the destination domain, as bytes32\",\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}}},\"title\":\"IMessageTransmitter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes,bytes)\":{\"notice\":\"Receives an incoming message, validating the header and passing the body to application-specific handler.\"},\"replaceMessage(bytes,bytes,bytes,bytes32)\":{\"notice\":\"Replace a message with a new message body and/or destination caller.\"},\"sendMessage(uint32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain.\"},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain, with a specified caller on the destination domain.\"}},\"notice\":\"Interface for message transmitters, which both relay and receive messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/wormhole-solidity-sdk/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\":\"IMessageTransmitter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/wormhole-solidity-sdk/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/\"],\"viaIR\":true},\"sources\":{\"lib/wormhole-solidity-sdk/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\":{\"keccak256\":\"0xac45c338c849c92922e597e3cb24ab520ddbe8549868d85e011c59cffafc1892\",\"urls\":[\"bzz-raw://37cd5837d13166bcf79757661ac25a3334d7ccf65555abe2614de80dd4ef9828\",\"dweb:/ipfs/Qmd3U3pqNFyfY8KdUWzN5WrLHXQNcEyFRvLzK4NA4yuQw8\"]},\"lib/wormhole-solidity-sdk/src/interfaces/CCTPInterfaces/IReceiver.sol\":{\"keccak256\":\"0x245890e2e962e24ba5f7196f23b38ccde0535b3874536b8d7b2d7db915b99baf\",\"urls\":[\"bzz-raw://dc44f3d84e1701d6a8376e56255c06fac050ef16a2d1d9ca5be32b542fe832f7\",\"dweb:/ipfs/QmPUMyBFYQ3e7PnX8VUawrLcW78VB7qTzpu1WqfKrLBwfw\"]},\"lib/wormhole-solidity-sdk/src/interfaces/CCTPInterfaces/IRelayer.sol\":{\"keccak256\":\"0x9ab413f906d302aef363187c3c86c51f31958d4b50afee8b102e2b7e07589a71\",\"urls\":[\"bzz-raw://0ed13cbf0d32caa864b971345c754fb9425ab5dd1e4ef5a546a513ecc4b9d35f\",\"dweb:/ipfs/Qmd16wx3KxWKWkqsuWDQdQVwhYF3afozDf9gHgiETGoRqG\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"receiveMessage","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"originalMessage","type":"bytes"},{"internalType":"bytes","name":"originalAttestation","type":"bytes"},{"internalType":"bytes","name":"newMessageBody","type":"bytes"},{"internalType":"bytes32","name":"newDestinationCaller","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"replaceMessage"},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"sendMessage","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"bytes32","name":"destinationCaller","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"sendMessageWithCaller","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]}],"devdoc":{"kind":"dev","methods":{"receiveMessage(bytes,bytes)":{"params":{"message":"The message raw bytes","signature":"The message signature"},"returns":{"success":"bool, true if successful"}},"replaceMessage(bytes,bytes,bytes,bytes32)":{"details":"The `originalAttestation` must be a valid attestation of `originalMessage`.","params":{"newDestinationCaller":"the new destination caller","newMessageBody":"new message body of replaced message","originalAttestation":"attestation of `originalMessage`","originalMessage":"original message to replace"}},"sendMessage(uint32,bytes32,bytes)":{"details":"Increment nonce, format the message, and emit `MessageSent` event with message information.","params":{"destinationDomain":"Domain of destination chain","messageBody":"Raw bytes content of message","recipient":"Address of message recipient on destination domain as bytes32"},"returns":{"_0":"nonce reserved by message"}},"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":{"details":"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.","params":{"destinationCaller":"caller on the destination domain, as bytes32","destinationDomain":"Domain of destination chain","messageBody":"Raw bytes content of message","recipient":"Address of message recipient on destination domain as bytes32"},"returns":{"_0":"nonce reserved by message"}}},"version":1},"userdoc":{"kind":"user","methods":{"receiveMessage(bytes,bytes)":{"notice":"Receives an incoming message, validating the header and passing the body to application-specific handler."},"replaceMessage(bytes,bytes,bytes,bytes32)":{"notice":"Replace a message with a new message body and/or destination caller."},"sendMessage(uint32,bytes32,bytes)":{"notice":"Sends an outgoing message from the source domain."},"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":{"notice":"Sends an outgoing message from the source domain, with a specified caller on the destination domain."}},"version":1}},"settings":{"remappings":["ds-test/=lib/wormhole-solidity-sdk/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/wormhole-solidity-sdk/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol":"IMessageTransmitter"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"lib/wormhole-solidity-sdk/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol":{"keccak256":"0xac45c338c849c92922e597e3cb24ab520ddbe8549868d85e011c59cffafc1892","urls":["bzz-raw://37cd5837d13166bcf79757661ac25a3334d7ccf65555abe2614de80dd4ef9828","dweb:/ipfs/Qmd3U3pqNFyfY8KdUWzN5WrLHXQNcEyFRvLzK4NA4yuQw8"],"license":null},"lib/wormhole-solidity-sdk/src/interfaces/CCTPInterfaces/IReceiver.sol":{"keccak256":"0x245890e2e962e24ba5f7196f23b38ccde0535b3874536b8d7b2d7db915b99baf","urls":["bzz-raw://dc44f3d84e1701d6a8376e56255c06fac050ef16a2d1d9ca5be32b542fe832f7","dweb:/ipfs/QmPUMyBFYQ3e7PnX8VUawrLcW78VB7qTzpu1WqfKrLBwfw"],"license":null},"lib/wormhole-solidity-sdk/src/interfaces/CCTPInterfaces/IRelayer.sol":{"keccak256":"0x9ab413f906d302aef363187c3c86c51f31958d4b50afee8b102e2b7e07589a71","urls":["bzz-raw://0ed13cbf0d32caa864b971345c754fb9425ab5dd1e4ef5a546a513ecc4b9d35f","dweb:/ipfs/Qmd16wx3KxWKWkqsuWDQdQVwhYF3afozDf9gHgiETGoRqG"],"license":null}},"version":1},"id":35}